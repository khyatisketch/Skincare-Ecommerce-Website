generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  phone     String     @unique
  email     String     @unique
  name      String
  address   String?
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String[]
  stock       Int
  categoryId  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  wishlist    Wishlist[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  total           Float
  discount        Float?
  couponCode      String?
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  shippingAddress String?
  trackingNumber  String?
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model Otp {
  id        Int      @id @default(autoincrement())
  phone     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  productId Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model CheckoutSession {
  id          Int      @id @default(autoincrement())
  sessionId   String   @unique
  status      String
  amountTotal Int?
  createdAt   DateTime @default(now())
}

model Coupon {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  type          String
  value         Float
  minOrderValue Float?
  usageLimit    Int?
  usedCount     Int      @default(0)
  expiresAt     DateTime
  createdAt     DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}
