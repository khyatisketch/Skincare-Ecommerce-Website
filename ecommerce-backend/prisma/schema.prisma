// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  email     String  @unique
  name      String
  address   String?
  role      Role      @default(USER)
  createdAt DateTime @default(now())
  orders    Order[]
  wishlist  Wishlist[]
  reviews   Review[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String[]
  stock       Int
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
  wishlist    Wishlist[]
  reviews     Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Order {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  total          Float        // The final total after discount
  discount       Float?       // Amount discounted (optional, null if no coupon applied)
  couponCode     String?      // Coupon code used (optional, null if no coupon applied)
  status         OrderStatus  @default(PENDING)
  createdAt      DateTime     @default(now())
  orderItems     OrderItem[]

  shippingAddress String?     // Store stringified JSON or plain address
  trackingNumber  String?     // Carrier tracking code
}


model Otp {
  id        Int      @id @default(autoincrement())
  phone     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // 1 to 5
  comment   String?
  status    String   @default("pending") // pending | approved | rejected
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model CheckoutSession {
  id          Int      @id @default(autoincrement())
  sessionId   String   @unique
  status      String
  amountTotal Int?
  createdAt   DateTime @default(now())
}

model Coupon {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  type           String    // "percentage" or "flat"
  value          Float
  minOrderValue  Float?    // optional
  usageLimit     Int?      // optional (max # of uses globally)
  usedCount      Int       @default(0)
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
}


enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

